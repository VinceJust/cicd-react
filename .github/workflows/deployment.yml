name: CI/CD Deployment

on:
  push:
    branches: [main]

jobs:
  ci_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Build React App
        run: npm run build

      - name: Upload dist/ as artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/

  infra_provision:
    needs: ci_build
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}"

      - name: Save EC2 Public IP
        id: ec2_output
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip | tr -d '\n')
          if [[ -z "$EC2_IP" ]]; then
            echo "EC2 public IP not found"; exit 1
          fi
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV

  app_deploy:
    needs: infra_provision
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download React Artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: Start SSH Agent and Add Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          scp -r dist/* ubuntu@${{ env.EC2_IP }}:/var/www/html
          ssh ubuntu@${{ env.EC2_IP }} "sudo systemctl restart nginx"
